package system;

import java.io.Serializable;
import java.util.List;

import api.Result;
import api.Task;

/**
 * Implementation of the {@link api.Result Result} interface
 * 
 * @author Manasa Chandrasekhar
 * @author Kowshik Prakasam
 */
public class ResultImpl<T> implements Result<T>, Serializable {

	private static final long serialVersionUID = -7688137730920618986L;
	private long startTime;
	private long endTime;
	private T result;
	private List<Task<T>> subTasks;

	/**
	 * 
	 * @param startTime
	 *            Starting time of the related {@link api.Task Task}
	 * @param endTime
	 *            Ending time of the related {@link api.Task Task}
	 */
	private ResultImpl(long startTime, long endTime) {
		this.startTime = startTime;
		this.endTime = endTime;
	}

	/**
	 * 
	 * @param startTime
	 *            Starting time of the related {@link api.Task Task}
	 * @param endTime
	 *            Ending time of the related {@link api.Task Task}
	 * @param result
	 *            Result generated by the underlying computation
	 */
	public ResultImpl(long startTime, long endTime, T result) {
		this(startTime, endTime);
		this.result = result;

	}

	/**
	 * 
	 * @param startTime
	 *            Starting time of the related {@link api.Task Task}
	 * @param endTime
	 *            Ending time of the related {@link api.Task Task}
	 * @param subTasks
	 *            List of subtasks generated by the Divide phase in the
	 *            underlying computation
	 */
	public ResultImpl(long startTime, long endTime, List<Task<T>> subTasks) {
		this(startTime, endTime);
		this.subTasks = subTasks;
	}

	/**
	 * @return Returns the start time of the task
	 * 
	 * 
	 */
	@Override
	public long getStartTime() {
		return this.startTime;
	}

	/**
	 *Sets the end time of the task
	 * 
	 * 
	 */
	@Override
	public void setEndTime(long time) {
		this.endTime = time;
	}

	/**
	 * @return Returns the end time of the task
	 * 
	 * 
	 */
	@Override
	public long getEndTime() {
		return this.endTime;
	}

	/**
	 * @return Returns the value computed by the task
	 * 
	 * 
	 */
	@Override
	public T getValue() {
		return this.result;
	}

	/**
	 * @return Returns sub tasks generated by the underlying computation using
	 *         divide and conquer
	 */
	@Override
	public List<Task<T>> getSubTasks() {
		return this.subTasks;
	}

	/**
	 * Sets the start time of the underlying computation
	 */

	@Override
	public void setStartTime(long time) {
		this.startTime = time;

	}

}
